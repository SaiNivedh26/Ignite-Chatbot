{"ast":null,"code":"// import React, { useState, useRef, useEffect } from 'react';\n// import { \n//   MessageCircle, \n//   Send, \n//   Plus, \n//   Loader, \n//   Moon, \n//   Sun, \n//   Settings, \n//   PlusCircle\n// } from 'lucide-react';\n\n// import './App.css';\n\n// export default function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [query, setQuery] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [isDarkMode, setIsDarkMode] = useState(false);\n//   const [chats, setChats] = useState([]);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(() => {\n//     scrollToBottom();\n//     // Apply dark mode to body\n//     document.body.classList.toggle('dark-mode', isDarkMode);\n//   }, [messages, isDarkMode]);\n\n//   const handleSearch = async (e) => {\n//     e.preventDefault();\n//     if (!query.trim()) return;\n\n//     setMessages(prev => [...prev, { text: query, sender: 'user' }]);\n//     setQuery('');\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch(`http://localhost:8000/search?query=${query}`);\n//       const data = await response.json();\n//       setTimeout(() => {\n//         setMessages(prev => [...prev, { text: data.message || \"I'm here to help!\", sender: 'bot' }]);\n//         setIsLoading(false);\n//       }, 500);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const startNewChat = () => {\n//     setMessages([]);\n//     setChats(prev => [\n//       { id: Date.now(), title: 'New Chat', active: true },\n//       ...prev.map(chat => ({ ...chat, active: false }))\n//     ]);\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : ''}`}>\n//       {/* Sidebar */}\n//       <div className=\"sidebar\">\n//         <div className=\"sidebar-header\">\n//           <button className=\"new-chat-button\" onClick={startNewChat}>\n//             <PlusCircle className=\"w-4 h-4 mr-2\" /> New chat\n//           </button>\n//         </div>\n\n//         <div className=\"chats-list\">\n//           {chats.map(chat => (\n//             <div key={chat.id} className={`chat-item ${chat.active ? 'active' : ''}`}>\n//               <MessageCircle className=\"w-4 h-4 mr-2\" />\n//               {chat.title}\n//             </div>\n//           ))}\n//         </div>\n\n//         <div className=\"sidebar-footer\">\n//           <button \n//             className=\"theme-toggle\"\n//             onClick={() => setIsDarkMode(!isDarkMode)}\n//           >\n//             {isDarkMode ? (\n//               <Sun className=\"w-5 h-5\" />\n//             ) : (\n//               <Moon className=\"w-5 h-5\" />\n//             )}\n//           </button>\n//           <button className=\"settings-button\">\n//             <Settings className=\"w-5 h-5\" />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Main Chat Area */}\n//       <div className=\"chat-container\">\n//         <div className=\"chat-header\">\n//           <div className=\"header-content\">\n//             <MessageCircle className=\"text-blue-500 w-8 h-8 mr-3 animate-pulse\" />\n//             <h1 className=\"app-title\">Nutino Rag</h1>\n//           </div>\n//           <div className=\"header-pills\">\n//             <span className=\"status-pill\">AI powered</span>\n//             <span className=\"feature-pill\">Nooglers Built</span>\n//           </div>\n//         </div>\n\n//         <div className=\"messages-container\">\n//           {messages.map((message, index) => (\n//             <div\n//               key={index}\n//               className={`message-wrapper ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}\n//             >\n//               <div className=\"message-content\">\n//                 {message.text}\n//               </div>\n//               <div className=\"message-timestamp\">\n//                 {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n//               </div>\n//             </div>\n//           ))}\n//           {isLoading && (\n//             <div className=\"bot-message\">\n//               <div className=\"typing-indicator\">\n//                 <span></span>\n//                 <span></span>\n//                 <span></span>\n//               </div>\n//             </div>\n//           )}\n//           {messages.length === 0 && (\n//             <div className=\"empty-state\">\n//               {/* Heartbeat Lines Animation */}\n//               <div className=\"heartbeat-lines\">\n//                 <div className=\"line\"></div>\n//                 <div className=\"line\"></div>\n//                 <div className=\"line\"></div>\n//               </div>\n\n//               <div className=\"empty-state-icon\">\n//                 <Plus className=\"w-12 h-12 text-blue-400\" />\n//               </div>\n//               <h3>Start Your Medical Consultation</h3>\n//               <p>Ask any medical question to get started</p>\n//             </div>\n//           )}\n//           <div ref={messagesEndRef} />\n//         </div>\n\n//         <form onSubmit={handleSearch} className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             value={query}\n//             onChange={(e) => setQuery(e.target.value)}\n//             placeholder=\"Type your medical question...\"\n//             className=\"message-input\"\n//           />\n//           <button\n//             type=\"submit\"\n//             className=\"send-button\"\n//             disabled={isLoading || !query.trim()}\n//           >\n//             {isLoading ? (\n//               <Loader className=\"w-5 h-5 animate-spin\" />\n//             ) : (\n//               <Send className=\"w-5 h-5\" />\n//             )}\n//           </button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/newapp/src/App.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import { \n//   MessageCircle, \n//   Send, \n//   Plus, \n//   Loader, \n//   Moon, \n//   Sun, \n//   Settings, \n//   PlusCircle\n// } from 'lucide-react';\n\n// import './App.css';\n\n// export default function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [query, setQuery] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [isDarkMode, setIsDarkMode] = useState(false);\n//   const [chats, setChats] = useState([]);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(() => {\n//     scrollToBottom();\n//     // Apply dark mode to body\n//     document.body.classList.toggle('dark-mode', isDarkMode);\n//   }, [messages, isDarkMode]);\n\n//   const handleSearch = async (e) => {\n//     e.preventDefault();\n//     if (!query.trim()) return;\n    \n//     setMessages(prev => [...prev, { text: query, sender: 'user' }]);\n//     setQuery('');\n//     setIsLoading(true);\n    \n//     try {\n//       const response = await fetch(`http://localhost:8000/search?query=${query}`);\n//       const data = await response.json();\n//       setTimeout(() => {\n//         setMessages(prev => [...prev, { text: data.message || \"I'm here to help!\", sender: 'bot' }]);\n//         setIsLoading(false);\n//       }, 500);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const startNewChat = () => {\n//     setMessages([]);\n//     setChats(prev => [\n//       { id: Date.now(), title: 'New Chat', active: true },\n//       ...prev.map(chat => ({ ...chat, active: false }))\n//     ]);\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : ''}`}>\n//       {/* Sidebar */}\n//       <div className=\"sidebar\">\n//         <div className=\"sidebar-header\">\n//           <button className=\"new-chat-button\" onClick={startNewChat}>\n//             <PlusCircle className=\"w-4 h-4 mr-2\" /> New chat\n//           </button>\n//         </div>\n\n//         <div className=\"chats-list\">\n//           {chats.map(chat => (\n//             <div key={chat.id} className={`chat-item ${chat.active ? 'active' : ''}`}>\n//               <MessageCircle className=\"w-4 h-4 mr-2\" />\n//               {chat.title}\n//             </div>\n//           ))}\n//         </div>\n\n//         <div className=\"sidebar-footer\">\n//           <button \n//             className=\"theme-toggle\"\n//             onClick={() => setIsDarkMode(!isDarkMode)}\n//           >\n//             {isDarkMode ? (\n//               <Sun className=\"w-5 h-5\" />\n//             ) : (\n//               <Moon className=\"w-5 h-5\" />\n//             )}\n//           </button>\n//           <button className=\"settings-button\">\n//             <Settings className=\"w-5 h-5\" />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Main Chat Area */}\n//       <div className=\"chat-container\">\n//         <div className=\"chat-header\">\n//           <div className=\"header-content\">\n//             <MessageCircle className=\"text-blue-500 w-8 h-8 mr-3 animate-pulse\" />\n//             <h1 className=\"app-title\">Nutino Rag</h1>\n//           </div>\n//           <div className=\"header-pills\">\n//             <span className=\"status-pill\">AI powered</span>\n//             <span className=\"feature-pill\">Nooglers Built</span>\n//           </div>\n//         </div>\n\n//         <div className=\"messages-container\">\n//           {messages.map((message, index) => (\n//             <div\n//               key={index}\n//               className={`message-wrapper ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}\n//             >\n//               <div className=\"message-content\">\n//                 {message.text}\n//               </div>\n//               <div className=\"message-timestamp\">\n//                 {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n//               </div>\n//             </div>\n//           ))}\n//           {isLoading && (\n//             <div className=\"bot-message\">\n//               <div className=\"typing-indicator\">\n//                 <span></span>\n//                 <span></span>\n//                 <span></span>\n//               </div>\n//             </div>\n//           )}\n//           {messages.length === 0 && (\n//             <div className=\"empty-state\">\n//               {/* Heartbeat Lines Animation */}\n//               <div className=\"heartbeat-lines\">\n//                 <div className=\"line\"></div>\n//                 <div className=\"line\"></div>\n//                 <div className=\"line\"></div>\n//               </div>\n\n//               <div className=\"empty-state-icon\">\n//                 <Plus className=\"w-12 h-12 text-blue-400\" />\n//               </div>\n//               <h3>Start Your Medical Consultation</h3>\n//               <p>Ask any medical question to get started</p>\n//             </div>\n//           )}\n//           <div ref={messagesEndRef} />\n//         </div>\n\n//         <form onSubmit={handleSearch} className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             value={query}\n//             onChange={(e) => setQuery(e.target.value)}\n//             placeholder=\"Type your medical question...\"\n//             className=\"message-input\"\n//           />\n//           <button\n//             type=\"submit\"\n//             className=\"send-button\"\n//             disabled={isLoading || !query.trim()}\n//           >\n//             {isLoading ? (\n//               <Loader className=\"w-5 h-5 animate-spin\" />\n//             ) : (\n//               <Send className=\"w-5 h-5\" />\n//             )}\n//           </button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}