{"ast":null,"code":"var _jsxFileName = \"D:\\\\newapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from 'react';\n// import { \n//   MessageCircle, \n//   Send, \n//   Plus, \n//   Loader, \n//   Moon, \n//   Sun, \n//   Settings, \n//   PlusCircle\n// } from 'lucide-react';\n\n// import './App.css';\n\n// export default function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [query, setQuery] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [isDarkMode, setIsDarkMode] = useState(false);\n//   const [chats, setChats] = useState([]);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(() => {\n//     scrollToBottom();\n//     // Apply dark mode to body\n//     document.body.classList.toggle('dark-mode', isDarkMode);\n//   }, [messages, isDarkMode]);\n\n//   const handleSearch = async (e) => {\n//     e.preventDefault();\n//     if (!query.trim()) return;\n\n//     setMessages(prev => [...prev, { text: query, sender: 'user' }]);\n//     setQuery('');\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch(`http://localhost:8000/search?query=${query}`);\n//       const data = await response.json();\n//       setTimeout(() => {\n//         setMessages(prev => [...prev, { text: data.message || \"I'm here to help!\", sender: 'bot' }]);\n//         setIsLoading(false);\n//       }, 500);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const startNewChat = () => {\n//     setMessages([]);\n//     setChats(prev => [\n//       { id: Date.now(), title: 'New Chat', active: true },\n//       ...prev.map(chat => ({ ...chat, active: false }))\n//     ]);\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : ''}`}>\n//       {/* Sidebar */}\n//       <div className=\"sidebar\">\n//         <div className=\"sidebar-header\">\n//           <button className=\"new-chat-button\" onClick={startNewChat}>\n//             <PlusCircle className=\"w-4 h-4 mr-2\" /> New chat\n//           </button>\n//         </div>\n\n//         <div className=\"chats-list\">\n//           {chats.map(chat => (\n//             <div key={chat.id} className={`chat-item ${chat.active ? 'active' : ''}`}>\n//               <MessageCircle className=\"w-4 h-4 mr-2\" />\n//               {chat.title}\n//             </div>\n//           ))}\n//         </div>\n\n//         <div className=\"sidebar-footer\">\n//           <button \n//             className=\"theme-toggle\"\n//             onClick={() => setIsDarkMode(!isDarkMode)}\n//           >\n//             {isDarkMode ? (\n//               <Sun className=\"w-5 h-5\" />\n//             ) : (\n//               <Moon className=\"w-5 h-5\" />\n//             )}\n//           </button>\n//           <button className=\"settings-button\">\n//             <Settings className=\"w-5 h-5\" />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Main Chat Area */}\n//       <div className=\"chat-container\">\n//         <div className=\"chat-header\">\n//           <div className=\"header-content\">\n//             <MessageCircle className=\"text-blue-500 w-8 h-8 mr-3 animate-pulse\" />\n//             <h1 className=\"app-title\">Nutino Rag</h1>\n//           </div>\n//           <div className=\"header-pills\">\n//             <span className=\"status-pill\">AI powered</span>\n//             <span className=\"feature-pill\">Nooglers Built</span>\n//           </div>\n//         </div>\n\n//         <div className=\"messages-container\">\n//           {messages.map((message, index) => (\n//             <div\n//               key={index}\n//               className={`message-wrapper ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}\n//             >\n//               <div className=\"message-content\">\n//                 {message.text}\n//               </div>\n//               <div className=\"message-timestamp\">\n//                 {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n//               </div>\n//             </div>\n//           ))}\n//           {isLoading && (\n//             <div className=\"bot-message\">\n//               <div className=\"typing-indicator\">\n//                 <span></span>\n//                 <span></span>\n//                 <span></span>\n//               </div>\n//             </div>\n//           )}\n//           {messages.length === 0 && (\n//             <div className=\"empty-state\">\n//               {/* Heartbeat Lines Animation */}\n//               <div className=\"heartbeat-lines\">\n//                 <div className=\"line\"></div>\n//                 <div className=\"line\"></div>\n//                 <div className=\"line\"></div>\n//               </div>\n\n//               <div className=\"empty-state-icon\">\n//                 <Plus className=\"w-12 h-12 text-blue-400\" />\n//               </div>\n//               <h3>Start Your Medical Consultation</h3>\n//               <p>Ask any medical question to get started</p>\n//             </div>\n//           )}\n//           <div ref={messagesEndRef} />\n//         </div>\n\n//         <form onSubmit={handleSearch} className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             value={query}\n//             onChange={(e) => setQuery(e.target.value)}\n//             placeholder=\"Type your medical question...\"\n//             className=\"message-input\"\n//           />\n//           <button\n//             type=\"submit\"\n//             className=\"send-button\"\n//             disabled={isLoading || !query.trim()}\n//           >\n//             {isLoading ? (\n//               <Loader className=\"w-5 h-5 animate-spin\" />\n//             ) : (\n//               <Send className=\"w-5 h-5\" />\n//             )}\n//           </button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChatWindow from './components/ChatWindow';\nimport SearchBar from './components/SearchBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const loggedIn = urlParams.get('logged_in');\n    if (loggedIn === 'true') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const handleSearch = async query => {\n    // Implementation as provided above\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Please log in using the Streamlit page.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Medical Chat App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XdG7ylvkl5c7dRCrhOPysBNSw/g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","SearchBar","jsxDEV","_jsxDEV","App","_s","messages","setMessages","isLoggedIn","setIsLoggedIn","urlParams","URLSearchParams","window","location","search","loggedIn","get","handleSearch","query","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSearch","_c","$RefreshReg$"],"sources":["D:/newapp/src/App.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import { \n//   MessageCircle, \n//   Send, \n//   Plus, \n//   Loader, \n//   Moon, \n//   Sun, \n//   Settings, \n//   PlusCircle\n// } from 'lucide-react';\n\n// import './App.css';\n\n// export default function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [query, setQuery] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [isDarkMode, setIsDarkMode] = useState(false);\n//   const [chats, setChats] = useState([]);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(() => {\n//     scrollToBottom();\n//     // Apply dark mode to body\n//     document.body.classList.toggle('dark-mode', isDarkMode);\n//   }, [messages, isDarkMode]);\n\n//   const handleSearch = async (e) => {\n//     e.preventDefault();\n//     if (!query.trim()) return;\n    \n//     setMessages(prev => [...prev, { text: query, sender: 'user' }]);\n//     setQuery('');\n//     setIsLoading(true);\n    \n//     try {\n//       const response = await fetch(`http://localhost:8000/search?query=${query}`);\n//       const data = await response.json();\n//       setTimeout(() => {\n//         setMessages(prev => [...prev, { text: data.message || \"I'm here to help!\", sender: 'bot' }]);\n//         setIsLoading(false);\n//       }, 500);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const startNewChat = () => {\n//     setMessages([]);\n//     setChats(prev => [\n//       { id: Date.now(), title: 'New Chat', active: true },\n//       ...prev.map(chat => ({ ...chat, active: false }))\n//     ]);\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : ''}`}>\n//       {/* Sidebar */}\n//       <div className=\"sidebar\">\n//         <div className=\"sidebar-header\">\n//           <button className=\"new-chat-button\" onClick={startNewChat}>\n//             <PlusCircle className=\"w-4 h-4 mr-2\" /> New chat\n//           </button>\n//         </div>\n\n//         <div className=\"chats-list\">\n//           {chats.map(chat => (\n//             <div key={chat.id} className={`chat-item ${chat.active ? 'active' : ''}`}>\n//               <MessageCircle className=\"w-4 h-4 mr-2\" />\n//               {chat.title}\n//             </div>\n//           ))}\n//         </div>\n\n//         <div className=\"sidebar-footer\">\n//           <button \n//             className=\"theme-toggle\"\n//             onClick={() => setIsDarkMode(!isDarkMode)}\n//           >\n//             {isDarkMode ? (\n//               <Sun className=\"w-5 h-5\" />\n//             ) : (\n//               <Moon className=\"w-5 h-5\" />\n//             )}\n//           </button>\n//           <button className=\"settings-button\">\n//             <Settings className=\"w-5 h-5\" />\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Main Chat Area */}\n//       <div className=\"chat-container\">\n//         <div className=\"chat-header\">\n//           <div className=\"header-content\">\n//             <MessageCircle className=\"text-blue-500 w-8 h-8 mr-3 animate-pulse\" />\n//             <h1 className=\"app-title\">Nutino Rag</h1>\n//           </div>\n//           <div className=\"header-pills\">\n//             <span className=\"status-pill\">AI powered</span>\n//             <span className=\"feature-pill\">Nooglers Built</span>\n//           </div>\n//         </div>\n\n//         <div className=\"messages-container\">\n//           {messages.map((message, index) => (\n//             <div\n//               key={index}\n//               className={`message-wrapper ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}\n//             >\n//               <div className=\"message-content\">\n//                 {message.text}\n//               </div>\n//               <div className=\"message-timestamp\">\n//                 {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n//               </div>\n//             </div>\n//           ))}\n//           {isLoading && (\n//             <div className=\"bot-message\">\n//               <div className=\"typing-indicator\">\n//                 <span></span>\n//                 <span></span>\n//                 <span></span>\n//               </div>\n//             </div>\n//           )}\n//           {messages.length === 0 && (\n//             <div className=\"empty-state\">\n//               {/* Heartbeat Lines Animation */}\n//               <div className=\"heartbeat-lines\">\n//                 <div className=\"line\"></div>\n//                 <div className=\"line\"></div>\n//                 <div className=\"line\"></div>\n//               </div>\n\n//               <div className=\"empty-state-icon\">\n//                 <Plus className=\"w-12 h-12 text-blue-400\" />\n//               </div>\n//               <h3>Start Your Medical Consultation</h3>\n//               <p>Ask any medical question to get started</p>\n//             </div>\n//           )}\n//           <div ref={messagesEndRef} />\n//         </div>\n\n//         <form onSubmit={handleSearch} className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             value={query}\n//             onChange={(e) => setQuery(e.target.value)}\n//             placeholder=\"Type your medical question...\"\n//             className=\"message-input\"\n//           />\n//           <button\n//             type=\"submit\"\n//             className=\"send-button\"\n//             disabled={isLoading || !query.trim()}\n//           >\n//             {isLoading ? (\n//               <Loader className=\"w-5 h-5 animate-spin\" />\n//             ) : (\n//               <Send className=\"w-5 h-5\" />\n//             )}\n//           </button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChatWindow from './components/ChatWindow';\nimport SearchBar from './components/SearchBar';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const loggedIn = urlParams.get('logged_in');\n    if (loggedIn === 'true') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const handleSearch = async (query) => {\n    // Implementation as provided above\n  };\n\n  if (!isLoggedIn) {\n    return <div>Please log in using the Streamlit page.</div>;\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Medical Chat App</h1>\n      <SearchBar onSearch={handleSearch} />\n      <ChatWindow messages={messages} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC7D,MAAMC,QAAQ,GAAGL,SAAS,CAACM,GAAG,CAAC,WAAW,CAAC;IAC3C,IAAID,QAAQ,KAAK,MAAM,EAAE;MACvBN,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpC;EAAA,CACD;EAED,IAAI,CAACV,UAAU,EAAE;IACf,oBAAOL,OAAA;MAAAgB,QAAA,EAAK;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC3D;EAEA,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,KAAK;IAAAL,QAAA,gBAClBhB,OAAA;MAAAgB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBpB,OAAA,CAACF,SAAS;MAACwB,QAAQ,EAAER;IAAa;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCpB,OAAA,CAACH,UAAU;MAACM,QAAQ,EAAEA;IAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEV;AAAClB,EAAA,CA3BQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}